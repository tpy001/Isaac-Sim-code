// Generated by gencpp from file act_dp_service/get_actionRequest.msg
// DO NOT EDIT!


#ifndef ACT_DP_SERVICE_MESSAGE_GET_ACTIONREQUEST_H
#define ACT_DP_SERVICE_MESSAGE_GET_ACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <act_dp_service/RawData.h>

namespace act_dp_service
{
template <class ContainerAllocator>
struct get_actionRequest_
{
  typedef get_actionRequest_<ContainerAllocator> Type;

  get_actionRequest_()
    : sensor()  {
    }
  get_actionRequest_(const ContainerAllocator& _alloc)
    : sensor(_alloc)  {
  (void)_alloc;
    }



   typedef  ::act_dp_service::RawData_<ContainerAllocator>  _sensor_type;
  _sensor_type sensor;





  typedef boost::shared_ptr< ::act_dp_service::get_actionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::act_dp_service::get_actionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct get_actionRequest_

typedef ::act_dp_service::get_actionRequest_<std::allocator<void> > get_actionRequest;

typedef boost::shared_ptr< ::act_dp_service::get_actionRequest > get_actionRequestPtr;
typedef boost::shared_ptr< ::act_dp_service::get_actionRequest const> get_actionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::act_dp_service::get_actionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::act_dp_service::get_actionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::act_dp_service::get_actionRequest_<ContainerAllocator1> & lhs, const ::act_dp_service::get_actionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sensor == rhs.sensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::act_dp_service::get_actionRequest_<ContainerAllocator1> & lhs, const ::act_dp_service::get_actionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace act_dp_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::act_dp_service::get_actionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::act_dp_service::get_actionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::act_dp_service::get_actionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "335520706867ed6fa97cbd3d60f4c7b9";
  }

  static const char* value(const ::act_dp_service::get_actionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x335520706867ed6fULL;
  static const uint64_t static_value2 = 0xa97cbd3d60f4c7b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "act_dp_service/get_actionRequest";
  }

  static const char* value(const ::act_dp_service::get_actionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 输入: 传感器数据\n"
"RawData sensor\n"
"\n"
"\n"
"================================================================================\n"
"MSG: act_dp_service/RawData\n"
"std_msgs/Float64MultiArray ee_pose     # 当前末端执行器 (End-Effector) 的位姿信息, 数据格式为一维数组: [位置 x, 位置 y, 位置 z, 朝向四元数 w, 朝向四元数 x, 朝向四元数 y, 朝向四元数 z]\n"
"std_msgs/Float64MultiArray joint_pos     # 关节角度，[joint1,joint2,...,joint7]\n"
"\n"
"std_msgs/Float64MultiArray init_ee_pose    # 初始末端执行器 (End-Effector) 的位姿信息\n"
"std_msgs/Float64MultiArray init_joint_pos    # 初始关节角度\n"
"\n"
"std_msgs/Float64 gripper_width           # 夹爪宽度\n"
"std_msgs/UInt8MultiArray rgb_data        # RGB 图像数据， (height x width x 3)\n"
"std_msgs/UInt8MultiArray depth_data        # 深度图 colorful (height x width x 3)\n"
"\n"
"std_msgs/Bool            reset           # 重置信号：True 表示请求系统重置或回到初始状态\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt8MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"uint8[]           data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::act_dp_service::get_actionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_actionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::act_dp_service::get_actionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::act_dp_service::get_actionRequest_<ContainerAllocator>& v)
  {
    s << indent << "sensor: ";
    s << std::endl;
    Printer< ::act_dp_service::RawData_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACT_DP_SERVICE_MESSAGE_GET_ACTIONREQUEST_H
